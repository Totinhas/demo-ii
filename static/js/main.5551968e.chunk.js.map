{"version":3,"sources":["constants/index.js","components/Contact/index.jsx","components/ContactList/index.jsx","components/ContactManager/index.jsx","components/Modal/index.jsx","functions/validation.js","constants/formStructure.js","components/Form/index.jsx","components/Input/index.jsx","App.js","serviceWorker.js","index.js"],"names":["initialValue","name","phone","email","Contact","onEdit","onDelete","aria-label","role","onClick","event","ContactList","className","listOfContacts","length","map","contact","ContactManager","Modal","children","isActive","test","phoneNumber","id","default","errorMessage","type","Form","data","onSubmit","useState","formData","setFormData","errorShow","setErrorShow","useEffect","onChange","target","value","stopPropagation","preventDefault","Validation","formStructure","input","key","Input","htmlFor","App","contacts","setContacts","isExpanded","setIsExpanded","selectedContact","setSelectedContact","filter","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5551968e.chunk.js","sourcesContent":["export const initialValue = { name: \"\", phone: \"\", email: \"\" };\n","import React from \"react\";\n\nconst DEFAULT_VAL = \"N/A\";\n\nconst Contact = ({\n  name = DEFAULT_VAL,\n  email = DEFAULT_VAL,\n  phone = DEFAULT_VAL,\n  onEdit,\n  onDelete,\n}) => {\n  const onEditWrapper = (event) => {\n    onEdit({ name, phone, email });\n  };\n  const onDeleteWrapper = (event) => {\n    onDelete(email);\n  };\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{phone}</td>\n      <td>{email}</td>\n      <td>\n        <span aria-label=\"edit\" role=\"img\" onClick={onEditWrapper}>\n          üñãÔ∏è\n        </span>\n      </td>\n      <td>\n        <span aria-label=\"delete\" role=\"img\" onClick={onDeleteWrapper}>\n          ‚ùå\n        </span>\n      </td>\n    </tr>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\nimport \"./ContactList.css\";\nimport Contact from \"../Contact\";\n\nconst ContactList = ({ className, listOfContacts, onEdit, onDelete }) => (\n  <table className={`contact-list-base${className ? ` ${className} ` : \"\"}`}>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Phone</th>\n        <th>Email</th>\n      </tr>\n    </thead>\n    <tbody>\n      {listOfContacts.length ? (\n        listOfContacts.map((contact) => (\n          <Contact\n            name={contact.name}\n            phone={contact.phone}\n            email={contact.email}\n            onDelete={onDelete}\n            onEdit={onEdit}\n          />\n        ))\n      ) : (\n        <div>No contacts present here yet</div>\n      )}\n    </tbody>\n  </table>\n);\n\nexport default ContactList;\n","import React from \"react\";\nimport \"./ContactManager.css\";\n\nconst ContactManager = ({ onClick }) => {\n  return (\n    <>\n      <div className=\"contact-manager-add\" onClick={onClick}>\n        +\n      </div>\n    </>\n  );\n};\n\nexport default ContactManager;\n","import React from \"react\";\nimport \"./Modal.css\";\n\nconst Modal = ({ children, isActive, onClick }) => (\n  <div className={`modal${isActive ? \" active\" : \" \"}`} onClick={onClick}>\n    {children}\n  </div>\n);\n\nexport default Modal;\n","const email = function (email) {\n  let regEmail = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(?:[a-zA-Z]{2,})$/;\n  let emailIsValid = regEmail.test(email);\n\n  return emailIsValid;\n};\n\nconst name = function (name) {\n  if (name.length >= 3) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst phone = function (phoneNumber) {\n  let regPhoneNumber = /^(((\\+44\\s?\\d{4}|\\(?0\\d{4}\\)?)\\s?\\d{3}\\s?\\d{3})|((\\+44\\s?\\d{3}|\\(?0\\d{3}\\)?)\\s?\\d{3}\\s?\\d{4})|((\\+44\\s?\\d{2}|\\(?0\\d{2}\\)?)\\s?\\d{4}\\s?\\d{4}))(\\s?\\#(\\d{4}|\\d{3}))?$/;\n  let phoneNumberIsValid = regPhoneNumber.test(phoneNumber);\n\n  return phoneNumberIsValid;\n};\n\nexport default { email, phone, name };\n","export default [\n  {\n    id: \"name\",\n    default: \"\",\n    name: \"Name\",\n    errorMessage: \"Insert a valid name\",\n    type: \"text\",\n  },\n  {\n    id: \"phone\",\n    default: \"\",\n    name: \"Phone\",\n    errorMessage: \"Insert a valid phone number\",\n    type: \"tel\",\n  },\n  {\n    id: \"email\",\n    default: \"\",\n    name: \"Email\",\n    errorMessage: \"Insert a valid email\",\n    type: \"text\",\n  },\n];\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./Form.css\";\nimport Validation from \"../../functions/validation\";\nimport formStructure from \"../../constants/formStructure\";\n\nimport { Input } from \"..\";\n\nconst Form = ({ data, onSubmit }) => {\n  const [formData, setFormData] = useState(data);\n  const [errorShow, setErrorShow] = useState({\n    name: false,\n    phone: false,\n    email: false,\n  });\n  useEffect(() => {\n    setFormData(data);\n  }, [data]);\n  const onChange = (event) =>\n    setFormData({ ...formData, [event.target.id]: event.target.value });\n  const onClick = (event) => event.stopPropagation();\n  const onSubmitWrapper = (event) => {\n    event.preventDefault();\n    setErrorShow({\n      name: !Validation.name(formData.name),\n      phone: !Validation.phone(formData.phone),\n      email: !Validation.email(formData.email),\n    });\n\n    if (\n      Validation.name(formData.name) &&\n      Validation.phone(formData.phone) &&\n      Validation.email(formData.email)\n    ) {\n      onSubmit(formData);\n    }\n  };\n\n  return (\n    <form onClick={onClick} className=\"form\" onSubmit={onSubmitWrapper}>\n      {formStructure.map((input) => (\n        <Input\n          key={input.id}\n          id={input.id}\n          name={input.name}\n          onChange={onChange}\n          value={formData[input.id]}\n          errorMessage={input.errorMessage}\n          errorShow={errorShow[input.id]}\n          type={input.type}\n        />\n      ))}\n      <Input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport \"./Input.css\";\n\nconst Input = ({\n  id,\n  onChange,\n  value,\n  errorMessage,\n  type,\n  errorShow,\n  name,\n}) => (\n  <>\n    {id && (\n      <label className=\"input-label\" htmlFor={id}>\n        {`${name}: `}\n      </label>\n    )}\n    <input\n      id={id}\n      className=\"input-input\"\n      onChange={onChange}\n      value={value}\n      type={type}\n    />\n    {errorShow && <p>{errorMessage}</p>}\n  </>\n);\nexport default Input;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { initialValue } from \"./constants\";\nimport { ContactList, ContactManager, Form, Modal } from \"./components\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [selectedContact, setSelectedContact] = useState(initialValue);\n\n  const onClick = () => {\n    setIsExpanded(!isExpanded);\n    setSelectedContact(initialValue);\n  };\n\n  const deleteContacts = (email) => {\n    setContacts(contacts.filter((contact) => contact.email !== email));\n  };\n\n  const editContacts = (data) => {\n    setSelectedContact(data);\n    setIsExpanded(true);\n  };\n\n  const addContacts = (data) => {\n    setSelectedContact(data);\n\n    setContacts(\n      contacts.filter((contact) => contact.email !== data.email).concat(data)\n    );\n\n    setIsExpanded(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <ContactManager onClick={onClick} />\n      <ContactList\n        listOfContacts={contacts}\n        onDelete={deleteContacts}\n        onEdit={editContacts}\n      />\n      <Modal onClick={onClick} isActive={isExpanded}>\n        <Form onSubmit={addContacts} data={selectedContact} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}